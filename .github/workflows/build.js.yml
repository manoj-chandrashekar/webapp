name: Build-Artifact-CI

on:
  pull_request:
    types:
      - closed

jobs:

  nodejs_tests:
    runs-on: ubuntu-latest
    services:
      mysql:
        image: mysql:8.0
        env:
          MYSQL_ROOT_PASSWORD: ${{ secrets.DB_ROOT_PASSWORD }}
          MYSQL_DATABASE: ${{ secrets.DB_NAME }}
        ports:
          - 3306:3306
        options: --health-cmd="mysqladmin ping" --health-interval=10s --health-timeout=5s --health-retries=3
  
    strategy:
      matrix:
        node-version: [16.x]
  
    steps:
      - uses: actions/checkout@v3
  
      - name: Use Node.js 
        uses: actions/setup-node@v3
        with:
          node-version: ${{ matrix.node-version }}
        #   cache: 'npm'
      - run: npm i
      - run: npm run build --if-present
      - name: Run Tests
        env:
          NODE_ENV: test
          DB_HOST: localhost
          DB_USER: root
          DB_PASSWORD: ${{ secrets.DB_ROOT_PASSWORD }}
          DB_NAME: ${{ secrets.DB_NAME }}
        run: npm test

  build_artifact_and_ami:
    needs: nodejs_tests
    runs-on: ubuntu-latest
    steps: 
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Build artifact
        run: zip -r webapp.zip ./ -x "node_modules/*" ".vscode/*" ".git/*" ".gitignore" "package-lock.json"

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

      - name: Packer init
        uses: hashicorp/packer-github-actions@master
        with:
          command: init
          target: aws-debian.pkr.hcl

      - name: Validate Packer template
        uses: hashicorp/packer-github-actions@master
        with:
          command: validate
          arguments: '-syntax-only'
          target: aws-debian.pkr.hcl

      - name: Build AMI
        id: packer_build
        uses: hashicorp/packer-github-actions@master
        with:
          command: build
          arguments: '-color=false -on-error=abort'
          target: aws-debian.pkr.hcl
        env:
          PACKER_LOG: 1

      - name: Checkout to demo
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_DEMO_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_DEMO_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

      - name: Extract AMI ID
        id: extract_ami
        run: |
          AMI_ID=$(jq -r '.builds[-1].artifact_id' packer-manifest.json | cut -d ":" -f2)
          echo "AMI_ID=$AMI_ID" >> $GITHUB_ENV

      - name: Fetch Current Launch Template ID
        id: fetch_template
        run: |
          TEMPLATE_ID=$(aws ec2 describe-launch-templates --query 'LaunchTemplates[0].LaunchTemplateId' --output text --region us-east-1)
          echo "TEMPLATE_ID=$TEMPLATE_ID" >> $GITHUB_ENV

      - name: Create new Launch Template version
        run: |
          aws ec2 create-launch-template-version --launch-template-id ${{ env.TEMPLATE_ID }} --source-version $Latest --launch-template-data '{"ImageId":"${{ env.AMI_ID }}"}' --region us-east-1

      - name: Update Auto-scaling Group
        run: |
          aws autoscaling update-auto-scaling-group --auto-scaling-group-name appAutoScalingGroup --launch-template '{"LaunchTemplateId":"${{ env.TEMPLATE_ID }}","Version":"$Latest"}'

      - name: Start Instance Refresh
        run: |
          aws autoscaling start-instance-refresh --auto-scaling-group-name appAutoScalingGroup --strategy "Rolling" --desired-configuration '{"MixedInstancesPolicy": {"LaunchTemplate": {"LaunchTemplateSpecification": {"LaunchTemplateId": "'"$TEMPLATE_ID"'","Version": "$Latest"},"Overrides": [{"InstanceType": "t2.micro"}]}}}' --region us-east-1

      - name: Wait for Instance Refresh to Complete
        run: |
          while : ; do
            STATUS=$(aws autoscaling describe-instance-refreshes --auto-scaling-group-name appAutoScalingGroup --query 'InstanceRefreshes[0].Status' --output text --region us-east-1)
            if [[ $STATUS == 'Successful' ]]; then
              echo "Instance Refresh Status: $STATUS"
              break
            elif [[ $STATUS == 'Failed' ]]; then
              echo "Instance Refresh Failed"
              exit 1
            fi
            else
              echo "Waiting for instance refresh... Status: $STATUS"
              sleep 30
            fi
          done